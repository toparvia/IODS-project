library(ggolot2)
library(ggplot2)
?ggpairs
??ggpairs
?read.table
human <- read.table(http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt")
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", "\t")
require(readr)
PKY <- read_delim("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", "\t", "\t", escape_double = FALSE, trim_ws = TRUE)
human <- read_delim("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
require("easypackages") # for loading and installing many packages at one time
packages_to_load <- c("broom", "dplyr", "tidyverse", "corrplot", "ggplot2", "GGally", "devtools", "ggthemes")
packages(packages_to_load, prompt = TRUE) # lock'n'load install/load
packages_to_load <- c("broom", "dplyr", "tidyverse", "corrplot", "ggplot2", "GGally", "devtools", "ggthemes", "stringr")
packages(packages_to_load, prompt = TRUE) # lock'n'load install/load
?mutate
GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
human$GNI
mutate(human$GNI = GNI)
mutate(human,human$GNI = GNI)
human$GNI <- str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric()
human$GNI
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
human <- select(human, one_of(keep))
complete.cases(human)
test <- data.frame(human[-1], comp = complete.cases(human))
test
human_ <- filter(human, complete.cases(human) == TRUE)
human_
human_$Country
tail(human_)
tail(human_, 10)
humaf <- human_[1:155]
humaf <- human_[1:155,]
humaf <- human_[1:nrow(human_)-7,]
chosen <- nrow(human_)-7
humaf <- human_[1:chosen,]
humaf
rownames(humaf) <- humaf$Country
humaf <- select(humaf, -Country)
write.csv(humaf, file = "data/humaf.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # to set directory to source file
write.csv(humaf, file = "data/humaf.csv")
tail(human_, 7)
require("easypackages") # for loading and installing many packages at one time
packages_to_load <- c("broom", "dplyr", "tidyverse", "corrplot", "ggplot2", "GGally", "devtools", "ggthemes", "stringr")
packages(packages_to_load, prompt = TRUE) # lock'n'load install/load
human <- read.table("data/humaf.csv", sep  =".", header = T)
human <- read.csv("data/humaf.csv", sep  =".", header = T)
human <- read.csv("data/humaf.csv", sep  ="/t", header = T)
?read.csv
human <- read.csv("data/humaf.csv", sep  =".", header = T)
human <- read.table("data/humaf.csv", sep  ="", header = T, row.names = 1)
View(human)
human <- read.table("data/humaf.csv", sep  =",", header = T, row.names = 1)
glimpse(human)
tail(human)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # to set directory to source file
?ggpairs
hm <- ggpairs(human, 1:8, lower = list(combo = wrap("facethist", binwidth = 0.5)))
hm
ggduo(
human, 1:4, 5:8,
types = list(continuous = "smooth_lm"),
title = "Between Academic and Psychological Variable Correlation",
xlab = "Psychological",
ylab = "Academic"
)
?ggduo
ggduo(
human, 1:4, 5:8,
types = list(continuous = "cor"),
title = "GNI constituents cor",
xlab = "",
ylab = ""
)
ggduo(
human, 1:4, 5:8,
types = list(continuous = "smooth_loess"),
title = "GNI constituents linear regression",
xlab = "",
ylab = ""
)
ggduo(
human, 1:4, 5:8,
types = list(continuous = "denstrip"),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 1:4, 5:8,
types = list(continuous = "smooth_loess", continuous = "smooth_lm"),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 1:4, 5:8,
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 4, c(1:3,5:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggpairs(
human, 1:8,
lower = list(combo = wrap("facethist", binwidth = 0.5,
mapping= aes(color = GNI)
)))
ggpairs(
human, 1:8,
lower = list(combo = wrap("facethist", binwidth = 0.5
)))
ggduo(
human, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", combo = "facetdensity", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggpairs(
human, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", combo = "facetdensity", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
ggduo(
human, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
?ggpairs
human_std <- scale(human)
ggpairs(
human_std, 1:8,
lower = list(combo = wrap("facethist", binwidth = 0.5
)))
View(human_std)
View(human_std)
human_std <- scale(human) %>% as.data.frame()
ggpairs(
human_std, 1:8,
lower = list(combo = wrap("facethist", binwidth = 0.5
)))
ggduo(
human_std, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
quartz()
x11()
ggduo(
human_std, 5, c(1:4,6:8),
types = list(continuous = "smooth_loess", mapping = aes(color = GNI)),
title = "GNI constituents loess smooth",
xlab = "",
ylab = ""
)
pca_human <- prcomp(human)
pca_human_std <- prcomp(human_std)
summary(pca_human)
summary(pca_human_std)
table(summary(pca_human))
str(summary(pca_human))
par(mfrow=c(2,2))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human_std, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
par(mfrow=c(2,1))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human_std, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
par(mfrow=c(1,2))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human_std, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
par(mfrow=c(2,1))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human_std, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# Running the principal component analysis'
pca_human       <- prcomp(human)
pca_human_std   <- prcomp(human_std)
# comparison summaries
s_pca_human     <- summary(pca_human)
s_pca_human_std <- summary(pca_human_std)
s_pca_human
s_pca_human_std
# Generating labels
pca_pr      <- round(100*s_pca_human$importance[2, ], digits = 1)
pca_pr_std <- round(100*s_pca_human_std$importance[2, ], digits = 1)
pca_pr_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
pca_pr_lab_std <- paste0(names(pca_pr_std), " (", pca_pr_std, "%)")
par(mfrow=c(2,1))
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab[1], ylab = pca_pr_lab[2])
biplot(pca_human_std, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
par(mfrow=c(2,1))
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab[1], ylab = pca_pr_lab[2])
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2])
par(mfrow=c(2,1))
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab[1], ylab = pca_pr_lab[2])
biplot(pca_human_std, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2])
par(mfrow=c(2,1))
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab[1], ylab = pca_pr_lab[2])
biplot(pca_human_std, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2])
?biplot
par(mfrow=c(2,1))
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab[1], ylab = pca_pr_lab[2],
main= "Principal component analysis of GNI components unstanradized"       )
biplot(pca_human_std, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2])
biplot(
pca_human_std,
cex = c(0.8, 1),
col = c("grey40", "deeppink2"),
xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2],
main= "Principal component analysis of GNI components (unstandardized)"))
biplot(
pca_human_std,
cex = c(0.8, 1),
col = c("grey40", "deeppink2"),
xlab = pca_pr_lab_std[1], ylab = pca_pr_lab_std[2],
main= "Principal component analysis of GNI components (unstandardized)")
par(mfrow=c(2,1))
biplot(
pca_human, cex = c(0.8, 1),
col = c("grey40", "deeppink2"),
xlab = pca_pr_lab[1],
ylab = pca_pr_lab[2],
main= "Principal component analysis of GNI components (unstandardized)"
)
biplot(
pca_human_std,
cex = c(0.8, 1),
col = c("black40", "green2"),
xlab = pca_pr_lab_std[1],
ylab = pca_pr_lab_std[2],
main= "Principal component analysis of GNI components (unstandardized)"
)
par(mfrow=c(2,1))
biplot(
pca_human, cex = c(0.8, 1),
col = c("grey40", "deeppink2"),
xlab = pca_pr_lab[1],
ylab = pca_pr_lab[2],
main= "Principal component analysis of GNI components (unstandardized)"
)
biplot(
pca_human_std,
cex = c(0.8, 1),
col = c("black", "green2"),
xlab = pca_pr_lab_std[1],
ylab = pca_pr_lab_std[2],
main= "Principal component analysis of GNI components (unstandardized)"
)
par(mfrow=c(2,1))
biplot(
pca_human, cex = c(0.8, 1),
col = c("grey40", "deeppink2"),
xlab = pca_pr_lab[1],
ylab = pca_pr_lab[2],
main= "Principal component analysis of GNI components (unstandardized)"
)
biplot(
pca_human_std,
cex = c(0.8, 1),
col = c("black", "green2"),
xlab = pca_pr_lab_std[1],
ylab = pca_pr_lab_std[2],
main= "Principal component analysis of GNI components (standardized)"
)
packages_to_load <- c("broom", "dplyr", "tidyverse", "corrplot", "ggplot2", "GGally", "devtools", "ggthemes", "stringr", "factominer")
packages(packages_to_load, prompt = TRUE) # lock'n'load install/load
packages_to_load <- c("broom", "dplyr", "tidyverse", "corrplot", "ggplot2", "GGally", "devtools", "ggthemes", "stringr", "FactoMineR")
packages(packages_to_load, prompt = TRUE) # lock'n'load install/load
tea <- data(tea)
data(tea)
res.mca = MCA(tea, ncp=20, quanti.sup=19, quali.sup=c(20:36), graph=FALSE)
res.hcpc = HCPC(res.mca)
res.mca = MCA(tea, ncp=20, quanti.sup=19, quali.sup=c(20:36), graph=FALSE)
?hcpc
??hcpc
res.hcpc = HCPC(res.mca, ], nb.clust=3)
res.hcpc = HCPC(res.mca, nb.clust=3)
par(mfrow=c(2,2))
res.hcpc = HCPC(res.mca, nb.clust=3)
