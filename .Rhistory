library(ggolot2)
library(ggplot2)
?ggpairs
??ggpairs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works in Rstudio only
library(dplyr)
#read data
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets"
# web address for math class data
url_math <- paste(url, "student-mat.csv", sep = "/")
# read the math class questionaire data into memory
math <- read.table(url_math, sep = ";" , header=TRUE)
# web address for portuguese class data
url_por <- paste(url, "student-por.csv", sep ="/")
# read the portuguese class questionaire data into memory
por <- read.table(url_por, sep = ";", header = TRUE)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join me)
alc <- select(math_por, one_of(keys))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(PM2, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
dim(alc)
?inner_join
math_por <- inner_join(math, por, by = join me)
math_por <- inner_join(math, por, by = join_by)
alc <- select(math_por, one_of(keys))
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
glimpse(alc)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
dim(alc)
glimpse(alc)
?write.csv
write.csv(alc, file= data/ex3.alc.csv )
write.csv(alc, file= "data/ex3.alc.csv")
write.csv(alc, file= "data/ex3alc.csv")
wd*9
wd()
getwd(9)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works in Rstudio only
write.csv(alc, file= "data/ex3alc.csv")
rm(list=ls())
alc <- read.csv(file = "data/ex3alc.csv")
glimpse(alc)
knitr::opts_chunk$set(echo = TRUE)
summary(alc)
alc2 <- select_if(alc, is.numeric)
library(dplyr) # data manipulation
library(caret) # findCorrelation algorithm
library(ggcorrplot) # plot the correlations
library(ggplot2)
library(GGally)
library(ggcorrplot)
library(caret)
alc2 <- select_if(alc, is.numeric)
correlations <- abs(cor(alc2, use="pairwise.complete.obs"))
View(correlations)
correlations.selected <- findCorrelation(correlations, cutoff = .7, exact = TRUE)
View(alc)
corr <- cor(alc[c(correlations.selected,32:34)])
corr <- cor(alc[c(correlations.selected)])
cor(alc[correlations.selected])
alc[correlations.selected]
corr <- cor(alc2[c(correlations.selected)])
corr
corr <- cor(alc2[c(correlations.selected,32:34)])
View(alc2)
corr <- cor(alc2[c(correlations.selected,15:17)])
corr
correlations.selected <- findCorrelation(correlations, cutoff = .6, exact = TRUE)
corr <- cor(alc2[c(correlations.selected,15:17)])
corr
corr <- cor(alc2[c(correlations.selected,15)])
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of PKY",
ggtheme=theme_bw)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of PKY",
ggtheme=theme_bw)
correlations.selected <- findCorrelation(correlations, cutoff = .5, exact = TRUE)
corr <- cor(alc2[c(correlations.selected,15)])
corr
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of PKY",
ggtheme=theme_bw)
grade.columns <- 15:17
correlations.selected <- union(correlations.selected,grade.columns )
correlations.selected
corr <- cor(alc2[c(correlations.selected,15)])
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of PKY",
ggtheme=theme_bw)
corr <- cor(alc2[c(correlations.selected)])
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of PKY",
ggtheme=theme_bw)
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
g = ggpairs(alc2,columns = c(correlations.selected), lower = list(continuous = my_fn))
g
View(alc2)
View(alc)
colnames(alc2[correlations.selected])
alc3 <- filter(alc, c(names.selected))
names.selected <- colnames(alc2[correlations.selected])
alc3 <- filter(alc, c(names.selected))
filter?
?filter
alc3 <- select(alc, names.selected)
names.selected
alc3 <- select(one_of(alc, names.selected))
alc3 <- select(one_of(alc, 'names.selected'))
alc3 <- subset(alc, select=names.selected)
acl3
alc3
alc3 <- subset(alc, select=c(names.selected, sex, school, guardian,activities))
alc3 <- subset(alc, select=c(names.selected, "sex", "school", "guardian,activities"))
alc3 <- subset(alc, select=c(names.selected, "sex", "school", "guardian", "activities"))
glimpse(alc3)
p <-ggpairs(alc, mapping = aes(col = sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
p <-ggpairs(alc3, mapping = aes(col = sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
names.selected
m <- glm(G3 ~ alc_use + Walc + age + medu = alc, family = "binomial")
m <- glm(G3 ~ alc_use + Walc + age + medu, data = alc3, family = "binomial")
m <- glm(G3 ~ alc_use + Walc + age + Medu, data = alc3, family = "binomial")
m <- glm(G3 ~ alc_use + Walc + age + Medu, data = alc3, family = "gaussian")
summary(m)
step(m)
m2 <- glm(G3 ~ alc_use + age + Medu, family = "gaussian", data = alc3)
summary(m2)
m2$null.deviance/deviance(m2)
deviance(m2)
deviance(m2)/m2$null.deviance
AIC(m,m2)
par(mfrow=c(2,2))
plot(m5)
par(mfrow=c(2,2))
plot(m2)
