df <- data.frame(x=rep(0, 30))
for(y in 1:30){
df[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN, aes(x, value, color=variable))
p + geom_line()
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
Ntot <- c()
for(i in 1:30){
Ntot[i] <- (x * i)
}
return(Ntot)
}
# create an empty data frame with 10 rows
df <- data.frame(x=rep(0, 30))
for(y in 1:30){
df[,y] <- forCycle(y)
}
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN, aes(x, value, color=variable))
p + geom_line()
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line()
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab(N/ha) + xlab(tonnia/ha)
p + geom_line() + ylab("N/ha") + xlab("tonnia/ha")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("N (kg/ha)") + xlab("lannoitetta (tonnia/ha)")
+geom_hline(yintercept = Nlim)
p + geom_line() + ylab("N (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
xnam <- paste("x", 1:25, sep="")
fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i*0.1)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
pf <- melt(pf, id.vars = "x")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
#Generating formulae
xnam <- paste("x", 1:25, sep="")
fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
# Simple way
# X is the applied fertilizer in tons
N4 =  4*1:30
N5 =  5*1:30
N6 =  6*1:30
N7 =  7*1:30
N8 =  8*1:30
x = 1:30
plot(x, N8, type= "l")
lines(N4)
lines(N5)
lines(N6)
lines(N7)
abline(v = Nlim)
View(pf)
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
pf <- melt(pf, id.vars = "x")
pfs <- pf
pfs$value <-pfs$value*0.1
View(pfs)
pf <- melt(pf, id.vars = "x")
pf$value <-pfs$value*0.1
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
Plim = 30
pf$value <-pfs$value*0.1
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
View(pf)
pf <- melt(pf, id.vars = "x")
pf$value <-pfs$value*0.1
p <- ggplot(pf[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
View(pf)
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
pf <- melt(pf, id.vars = "x")
pf$value <-pfs$value*0.1
p <- ggplot(pf[0:300,], aes(x, value, color=variable))
pf$value <-pf$value*0.1
p <- ggplot(pf[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
Plim = 30
p <- ggplot(pf[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
0.1:0.5
1:5
1:5/5
1:5/10
1:10/10
xnam <- paste("x", 2:30/10, sep="")
xnam <- paste("P ", 2:30/10, , " kg/tn"sep="")
xnam <- paste("P ", 2:30/10, , " kg/tn", sep="")
?expression
xnam <- paste("P ", 2:30/10, " kg/tn", sep="")
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
View(pf)
pf <- melt(pf, id.vars = "P 0.1 kg/tn")
pf$value <-pf$value*0.1
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
colnames(pf) <- x
colnames(pf) <- c("x")
View(pf)
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
colnames(pf) <- c("x")
View(pf)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
colnames(pf[1]) <- c("x")
View(pf)
colnames(pf[,1]) <- c("x")
colnames(pf[1]) <- c("x")
View(pf)
colnames(pf)[1] <- c("x")
View(pf)
pf <- melt(pf, id.vars = "P 0.1 kg/tn")
pf <- melt(pf, id.vars = "x")
pf$value <-pf$value*0.1
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("P liuk. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
Nlim = 170.1
# X is the applied fertilizer in tons
# y is the content in kg/tn
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
df <- data.frame(x=rep(0, 30))
for(y in 1:30){
df[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("N ", 1:30, " kg/tn", sep="")
colnames(pf)[1] <- c("x")
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
colnames(df) <- paste("N ", 1:30, " kg/tn", sep="")
colnames(df)[1] <- c("x")
View(df)
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("N kok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
?optim
pfun = x* 1.5
function(pfun){x* 1.5}
optim(pfun, interval=c("0","30"), maxium=TRUE)
pfun <-  function(pfun){x* 1.5}
optim(pfun, interval=c("0","30"), maxium=TRUE)
optimize(pfun, interval=c("0","30"), maxium=TRUE)
optimize(pfun, interval=c("0","30"), maximum=TRUE)
?optimize
optimize(pfun,  c(0, 1), tol = 0.0001,)
optimize(pfun,  c(0, 1), tol = 0.0001)
optimize(pfun,  c(0, 1), tol = 0.0001,x=1)
pfun <-  function(x){x* 1.5}
optimize(pfun,  c(0, 1), tol = 0.0001,x=1)
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
optimize(pfun,  c(0, 5), tol = 0.0001,x=1)
optimize(pfun,  c(0, 5), tol = 0.0001)
optimize(pfun,  c(0, 5), tol = 0.0001, maxium=TRUE)
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE)
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE, a=1.5)
pfun <-  function(x, a){x* a}
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE, a=1.5)
optimize(pfun,  c(0, 25), tol = 0.0001, maximum=TRUE, a=1.5)
optimize(function(x) x*(print(a)), lower = 0, upper = 10)
optimize(function(x) x*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) x*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) print(x)*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) print(x)*(print(a)), lower = 0, upper = 10, a=1.5, maximum=TRUE)
optimize(function(a, x) print(x)*1.5=a, lower = 0, upper = 10, maximum=TRUE)
optimize(function(a, x) print(x)*1.5=a, lower = 0, upper = 10, maximum=TRUE, x=1.5)
install.packages("packrat")
library("packrat", lib.loc="~/R/win-library/3.4")
install.packages("treemapify")
library(readr)
JYTOPKYS3_data <- read_delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt ",
"\t", escape_double = FALSE, na = "NA")
View(JYTOPKYS3_data)
dim(PKY)
PKY <- read_delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt ",
+     "\t", escape_double = FALSE, na = "NA")
PKY <- read_delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt ", "\t", escape_double = FALSE, na = "NA")
dim(PKY)
str(PKY)
library(readr)
JYTOPKYS3_data <- read_delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(JYTOPKYS3_data)
library(readr)
PKY <- read_delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
dim(PKY)
str(PKY)
summary(PKY)
library(ggplot2)
p <-ggpairs(PKY, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
??ggpairs
install.packages("GGally")
library(GGally)
p <-ggpairs(PKY, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
p <-ggpairs(PKY, mapping = aes(col = gender, alpha = 0.3),colums= c(1:5,60), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums= c(1:5,60), lower = list(combo = wrap("facethist", bins = 20)))
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
g = ggpairs(PKY,columns = 1:4, lower = list(continuous = my_fn))
g
g = ggpairs(PKY,columns = 1:4, lower = list(interval = my_fn))
g
correlations <- vapply(
PKY[, -1],
function(x)
{
cor(PKY[, 1], x)
},
numeric(1)
)
correlations <- vapply(
PKY[c(, -1,-60)],
function(x)
{
cor(PKY[, 1], x)
},
numeric(1)
)
correlations <- vapply(
PKY[, c(-1,-60)],
function(x)
{
cor(PKY[, 1], x)
},
numeric(1)
)
correlations[which.max(abs(correlations))]
correlations
correlations <- vapply(
PKY[, c(-60)],
function(x)
{
cor(PKY[, 59], x)
},
numeric(1)
)
correlations[which.max(abs(correlations))]
correlations
p <-ggpairs(PKY,colums= c(1:5,59), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums= c(,c(1:5,59)), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums= ,c(1:5,59), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums= c(,c(1:5,59)), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums= PKY[c(,c(1:5,59))], lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums=c(1:5,59), lower = list(combo = wrap("facethist", bins = 20)))
p <-ggpairs(PKY,colums=c(1:2), lower = list(combo = wrap("facethist", bins = 20)))
p
1:4
c(1:4,6)
g = ggpairs(PKY,columns = c(1:4,59), lower = list(interval = my_fn))
g
cor_PNY <- correlations[which.max(abs(correlations))]
cor_PNY
correlations <- vapply(
PKY[, c(-60)],
function(x)
{
cor(PKY[, 59], x)
},
numeric(1)
)
correlations
dim(correlations)
length(correlations)
cor_PNY <- correlations[which.max(abs(correlations[-59]))]
cor_PNY
cor_PNY_min <- correlations[which.mix(abs(correlations[-59]))]
cor_PNY_min <- correlations[which.min(abs(correlations[-59]))]
cor_PNY_min
plot(correlations)
plot(correlations[-59])
cor_PNY_min <- correlations[which.min(correlations[-59])]
cor_PNY_min
cor_PKY <- data.frame(correlations[-59])
cor_PKY
plot(cor_PKY)
str(cor_PKY)
g = ggpairs(PKY,columns = c(4,14,15,56,58,59), lower = list(interval = my_fn))
g
g = ggpairs(PKY,columns = c(4,14,15,56,58,59), lower = list(continous = my_fn))
?ggpairs
g = ggpairs(PKY,columns = c(4,14,15,56,58,59), lower = list(combo = my_fn))
g
g = ggpairs(PKY,columns = c(4,14,15,56,58,59), lower = list(continuous = my_fn))
g
maxN(correlations[-59])
maxN <- function(x, N=2){
len <- length(x)
if(N>len){
warning('N greater than length(x).  Setting N=length(x)')
N <- length(x)
}
sort(x,partial=len-N+1)[len-N+1]
}
maxN(abs(correlations[-59]))
maxN(correlations[-59])
axN <- function(x, N=5){
len <- length(x)
if(N>len){
warning('N greater than length(x).  Setting N=length(x)')
N <- length(x)
}
sort(x,partial=len-N+1)[len-N+1]
}
maxN(correlations[-59])
maxN(1:6)
cor_PNY <- correlations[-59]
n <- length(cor_PNY)
sort(cor_PNY,partial=n-1)[n-1]
.libPaths()
.libPaths( c( .libPaths(), "C:/Program Files/R/R-3.4.1/library)" )
)
.libPaths()
.libPaths("C:/Rlibrary)")
.libPaths()
.libPaths( c( .libPaths(), "C:/Program Files/R/R-3.4.1/library" )
)
.libPaths()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works in Rstudio only
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(getActiveDocumentContext()$path))
script.dir <- dirname(sys.frame(1)$ofile)
sourceDir <- getSrcDirectory(function(dummy) {dummy})
sourceDir
script.dir <- dirname(sys.frame(1)$ofile)
sourceDir <- getSrcDirectory(function(dummy) {dummy})
sourceDir
setwd(sourceDir)
setwd("C:/IODS-project/IODS-project")
setwd_thisdir <- function () {
this.dir <- dirname(parent.frame(3)$ofile)
setwd(this.dir)
}
setwd_thisdir()
install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(rstudioapi)
.libPaths( c( .libPaths(), "C:/Program Files/R/R-3.4.1/library")
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(rstudioapi)
install.packages("rstudioapi")
library(rstudioapi)
.libPaths("c:/Rpackages")
.libPaths()
.libPaths("c:/RstudioPackages")
.libPaths()
packages_to_load <- c("dplyr", "MASS", "tidyverse", "corrplot", "rstudioapi")
lapply(packages_to_load, require, character.only = TRUE)
lapply(packages_to_load, install.packages, character.only = TRUE)
.libPaths("c:/RstudioPackages")
lapply(packages_to_load, install.packages, character.only = TRUE)
packages_to_load <- c("dplyr", "MASS", "tidyverse", "corrplot", "rstudioapi")
lapply(packages_to_load, install.packages, character.only = TRUE)
install.packages("rstudioapi")
packages_to_load <- list("dplyr", "MASS", "tidyverse", "corrplot", "rstudioapi")
lapply(packages_to_load, install.packages, character.only = TRUE)
install.packages("easypackages")
.libPaths("c:/RstudioPackages")
packages_to_load <- list("dplyr", "MASS", "tidyverse", "corrplot", "rstudioapi")
packages(packages_to_load)
library(easypackages)
packages(packages_to_load)
libraries(packages_to_load)
packages(packages_to_load)
