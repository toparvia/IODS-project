}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
View(pf)
pf <- melt(pf, id.vars = "P 0.1 kg/tn")
pf$value <-pf$value*0.1
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
colnames(pf) <- x
colnames(pf) <- c("x")
View(pf)
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
pf <- data.frame(x=rep(0, 30))
for(y in 1:30){
pf[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
colnames(pf) <- c("x")
View(pf)
colnames(pf) <- paste("P ", 1:30/10, " kg/tn", sep="")
colnames(pf[1]) <- c("x")
View(pf)
colnames(pf[,1]) <- c("x")
colnames(pf[1]) <- c("x")
View(pf)
colnames(pf)[1] <- c("x")
View(pf)
pf <- melt(pf, id.vars = "P 0.1 kg/tn")
pf <- melt(pf, id.vars = "x")
pf$value <-pf$value*0.1
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
p <- ggplot(pf, aes(x, value, color=variable))
p + geom_line() + ylab("P liuk. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Plim)
Nlim = 170.1
# X is the applied fertilizer in tons
# y is the content in kg/tn
for i (in x){
y(x)=x
# Function to assign values using a for loop
forCycle <- function(x){
# create an empty vector
v <- c()
for(i in 1:30){
v[i] <- (x * i)
}
return(v)
}
# create an empty data frame with 30 rows
df <- data.frame(x=rep(0, 30))
for(y in 1:30){
df[,y] <- forCycle(y)
}
library(reshape2)
library(ggplot2)
colnames(pf) <- paste("N ", 1:30, " kg/tn", sep="")
colnames(pf)[1] <- c("x")
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
colnames(df) <- paste("N ", 1:30, " kg/tn", sep="")
colnames(df)[1] <- c("x")
View(df)
dfN <- melt(df, id.vars = "x")
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("Nkok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
p <- ggplot(dfN[0:300,], aes(x, value, color=variable))
p + geom_line() + ylab("N kok. (kg/ha)") + xlab("lannoitetta (tonnia/ha)") + geom_hline(yintercept = Nlim)
?optim
pfun = x* 1.5
function(pfun){x* 1.5}
optim(pfun, interval=c("0","30"), maxium=TRUE)
pfun <-  function(pfun){x* 1.5}
optim(pfun, interval=c("0","30"), maxium=TRUE)
optimize(pfun, interval=c("0","30"), maxium=TRUE)
optimize(pfun, interval=c("0","30"), maximum=TRUE)
?optimize
optimize(pfun,  c(0, 1), tol = 0.0001,)
optimize(pfun,  c(0, 1), tol = 0.0001)
optimize(pfun,  c(0, 1), tol = 0.0001,x=1)
pfun <-  function(x){x* 1.5}
optimize(pfun,  c(0, 1), tol = 0.0001,x=1)
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
optimize(pfun,  c(0, 5), tol = 0.0001,x=1)
optimize(pfun,  c(0, 5), tol = 0.0001)
optimize(pfun,  c(0, 5), tol = 0.0001, maxium=TRUE)
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE)
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE, a=1.5)
pfun <-  function(x, a){x* a}
optimize(pfun,  c(0, 5), tol = 0.0001, maximum=TRUE, a=1.5)
optimize(pfun,  c(0, 25), tol = 0.0001, maximum=TRUE, a=1.5)
optimize(function(x) x*(print(a)), lower = 0, upper = 10)
optimize(function(x) x*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) x*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) print(x)*(print(a)), lower = 0, upper = 10, a=1.5)
optimize(function(x, a) print(x)*(print(a)), lower = 0, upper = 10, a=1.5, maximum=TRUE)
optimize(function(a, x) print(x)*1.5=a, lower = 0, upper = 10, maximum=TRUE)
optimize(function(a, x) print(x)*1.5=a, lower = 0, upper = 10, maximum=TRUE, x=1.5)
install.packages("packrat")
library("packrat", lib.loc="~/R/win-library/3.4")
install.packages("treemapify")
tra <- read.table(file = "Nitrogen_Treemap_ULJAS_SITC1996-2014_SITC5_version_0.971_2.txt",
header = TRUE,
dec = ".")
setwd("C:/HYDATA/OneDrive - University of Helsinki/Jatko-opinnot/Data/P9 Trade/") #laptop
tra <- read.table(file = "Nitrogen_Treemap_ULJAS_SITC1996-2014_SITC5_version_0.971_2.txt",
header = TRUE,
dec = ".")
treemap(tra,
index=c("Item", "Class"),
vSize="average",
vColor="average",
type="value")
library(treemapify)
treemap(tra,
index=c("Item", "Class"),
vSize="average",
vColor="average",
type="value")
?treemap
??treemap
library(treemap)
treemap(tra,
index=c("Item", "Class"),
vSize="average",
vColor="average",
type="value")
?treemapify
treemapify(tra, average, average, class, item
)
head(tra$average)
treemapify(data=tra, area=average, fill=average, group=class, label=item)
head(tra)
treemapify(data=tra, area=average, group=class, label=item)
treemapify(data=tra, area=X2014, group=class, label=item)
treemapify(data=tra, area=tra$X2014, group=class, label=item)
summary(tra)
tra2 <- subset(tra[,1:4])
tra2
tra2 <- subset(tra[,1:5])
hist(tra$X1996)
treemapify(data=tra2, area=$X1996, group=Class, label=Item)
treemapify(data=tra2, area=X1996, group=Class, label=Item)
treemapify(data=tra2, area=tra2[,5], group=Class, label=Item)
tra2[,5]
ggplot(G20, aes(area = GDP.mil.USD, fill = HDI)) +
geom_treemap()
library(ggplot2)
ggplot(G20, aes(area = GDP.mil.USD, fill = HDI)) +
geom_treemap()
ggplot(G20, aes(area = GDP.mil.USD, fill = HDI, label = Country)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
ggplot(G20, aes(
area = GDP.mil.USD,
fill = HDI,
label = Country,
subgroup = Region,
)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(
place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0
) +
geom_treemap_text(
colour = "white",
place = "topleft",
reflow = T
)
ggplot(tra2, aes(area = X1996, fill = X1996, label = Item)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
gplot(tra2, aes(area = X1996, fill = X1997, label = Item)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
ggplot(tra2, aes(area = X1996, fill = X1997, label = Item)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
ggplot(tra2, aes(area = X1996, fill = X1996, label = Item)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
ggplot(tra2, aes(area = X1996, fill = X1996, label = Item)) +
geom_treemap()
data(G20)
G20
ggplot(tra2, aes(area = X1996)) +
geom_treemap()
tra2
ggplot(tra, aes(area = average)) +
geom_treemap()
str(tra)
tra2$X1996 <- as.integer(tra2$X1996)
ggplot(tra, aes(area = average)) +
geom_treemap()
is.na(tra)
is.na(tra2$X1996)
head(tra2)
ggplot(tra, aes(area = Class.Num)) +
geom_treemap()
ggplot(G20, aes(
area = GDP.mil.USD,
fill = HDI,
label = Country,
subgroup = Region,
)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(
place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0
) +
geom_treemap_text(
colour = "white",
place = "topleft",
reflow = T
)
ggplot
ggplot(tra2, aes(area = Class.Num, fill = X1996)) +
geom_treemap()
ggplot(tra2, aes(area = X1996, fill = X1996)) +
geom_treemap()
trat <- read.table(file = "test.txt",
header = TRUE,
dec = ".")
ggplot(trat, aes(area = average, fill = average)) +
geom_treemap()
ggplot(trat, aes(area = average) +
geom_treemap()
?geom_treemap
ggplot(trat, aes(area = average)) +
geom_treemap()
geom_treemap?
?geom_treemap
head(trat$average)
trat <- read.table(file = "test.txt",
header = TRUE,
dec = ".")
ggplot(trat, aes(area = val)) +
geom_treemap()
ggplot(G20, aes(area = HFI)) +
geom_treemap()
ggplot(G20, aes(area = HDI)) +
geom_treemap()
trat$val <- as.numeric(trat$val)
ggplot(trat, aes(area = val)) +
geom_treemap()
data(GNI2014)
hist(trat$val)
trat2<- trat[10,]
hist(trat2$♣val)
hist(trat2$♣al)
hist(trat2$val)
trat2$val
trat2
trat2<- trat[0:10,]
hist(trat2$val)
ggplot(trat2, aes(area = val)) +
geom_treemap()
ggplot(trat2, aes(area = val, fill= val)) +
geom_treemap()
?subset
hist(tra2$val)
summary(tra2$val)
summary(tra2$average)
summary(tra2$X1996)
tra3 <- subset(tra2, X1996 > 144136)
tra3
summary(tra3)
ggplot(tra3, aes(area = X1996, fill= X1996)) +
geom_treemap()
ggplot(tra3, aes(area = X1996, fill= X1996, label=SITC5)) +
geom_treemap()
ggplot(tra3, aes(area = X1996, fill= X1996, label=SITC5)) +
geom_treemap() +
geom_treemap_text(
fontface = "italic",
colour = "white",
place = "centre",
grow = TRUE
)
ggplot(tra3, aes(area = X1996, fill= X1996, label=SITC5, subgroup=Class.Num)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(
place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0
) +
geom_treemap_text(
colour = "white",
place = "topleft",
reflow = T
)
ggplot(tra3, aes(area = X1996, fill= X1996, label=Item, subgroup=Class.Num)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(
place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0
) +
geom_treemap_text(
colour = "white",
place = "topleft",
reflow = T
)
ggplot(tra3, aes(area = X1996, fill= X1996, label=Item, subgroup=Class.Num)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(
place = "centre",
grow = T,
alpha = 0.5,
colour = "black",
fontface = "italic",
min.size = 0
) +
geom_treemap_text(
colour = "white",
place = "topleft",
reflow = T
)
version()
install.packages("rio")
library(rio)
install_formats()
library(rio)
setwd("C:/HYDATA/OneDrive - University of Helsinki/R")
?rio
import(county, "data.json")
county <- 0
import(county, "data.json")
county <- import("data.json")
?import
install.packages("jsonlite")
setwd("C:/HYDATA/OneDrive - University of Helsinki/R")
county <- 0
library(jsonlite)
?jsonlite
?fromJSON
county2 <- fromJSON("data.json")
str(county2)
county2 <- fromJSON("data.json", flatten=TRUE)
str(county2)
sub("chr ".*", "chr ", county2)
gsub("\\[[^\\]]*\\]", "", county2, perl=TRUE)
sub("\\[[^\\]]*\\]", "", county2, perl=TRUE)
test <- sub("\\[[^\\]]*\\]", "", county2, perl=TRUE)
test <- sub("*?", "", county2, perl=TRUE)
test <- sub(".*", "", county2, perl=TRUE)
test <- sub("chr .*", "", county2, perl=TRUE)
test
test <- sub("chr .*", "*. chr ", county2, perl=TRUE)
kunnat <- import("kuntienjarjestus_minimal.xlsx")
library(rio)
kunnat <- import("kuntienjarjestus_minimal.xlsx")
library(jsonlite)
x <- toJSON(kunnat)
x
names(flatten(x))
head(kunnat)
devtools::install_github("r-lib/crayon")
library(crayon)
str(Boston)
cat(yellow$bgMagenta$bold('Hello world!\n'))
rm(list=ls())
.libPaths( c( .libPaths(), "C:/Program Files/R/R-3.4.1/library")
)
libPaths()
.libPaths()
sourceDir <- getSrcDirectory(function(dummy) {dummy})
setwd(sourceDir)
setwd("C:/IODS-project/IODS-project")
sourceDir
sourceDir <- getSrcDirectory(function(dummy) {dummy})
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works in Rstudio only
install.packages("easypackages")
require(easypackages)
packages_to_load <- c("dplyr", "MASS", "tidyverse", "corrplot")
packages(packages_to_load) # install
libraries(packages_to_load) # load
install.packages("broom")
install.packages("broom", dependencies = TRUE)
packages_to_load <- c("broom", "dplyr", "MASS", "tidyverse", "corrplot")
packages(packages_to_load, prompt = FALSE) # install
libraries(packages_to_load) # load
# load the data
data("Boston")
packages("broom")
install.packages("broom", dependencies = TRUE)
install.packages("stringi", dependencies = TRUE)
install.packages("broom", dependencies = TRUE)
packages_to_load <- c("broom", "dplyr", "MASS", "tidyverse", "corrplot")
packages(packages_to_load, prompt = FALSE) # install
libraries(packages_to_load) # load
packages_to_load <- c("broom", "dplyr", "MASS", "tidyverse", "corrplot", "ggplot2", "GGally")
packages(packages_to_load, prompt = FALSE) # install
# explore the dataset
str(      Boston)
summary(  Boston)
# plot matrix of the variables
pairs(Boston)
script.dir <- dirname(sys.frame(1)$ofile)
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
g = ggpairs(Boston,columns = c(1:14), lower = list(continuous = my_fn))
g
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits = 2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
names(Boston)
m <- lm(crim ~ . , data=Boston)
summary(m)
install.packages("caret")
library(caret)
names(Boston)
fit <- sbf(
form = Boston$crim ~ .,
data = alc[c(1:14)], method = "glmnet", # Dalc and Walc are dropped as they are the parameters high_use is based on, D1:D3, dropped as well, since grades are known only after students are done with the studies (especially final exam G3)
tuneGrid=expand.grid(.alpha = .01, .lambda = .1),
preProc = c("center", "scale"),
trControl = trainControl(method = "none"),
sbfControl = sbfControl(functions = caretSBF, method = 'cv', number = 10)
)
fit <- sbf(
form = Boston$crim ~ .,
data = Boston[c(1:14)], method = "glmnet", # Dalc and Walc are dropped as they are the parameters high_use is based on, D1:D3, dropped as well, since grades are known only after students are done with the studies (especially final exam G3)
tuneGrid=expand.grid(.alpha = .01, .lambda = .1),
preProc = c("center", "scale"),
trControl = trainControl(method = "none"),
sbfControl = sbfControl(functions = caretSBF, method = 'cv', number = 10)
)
fit
m <- lm(crim ~ . , data=Boston)
m2 <- lm(crim ~ age + black + dis +indus + lstat, data=Boston)
AIC(m,m2)
plot(m2)
par(mfrow=c(2,2))
plot(m2)
plot(m)
?scale
